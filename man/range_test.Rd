% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/range_test.R
\docType{data}
\name{range_test}
\alias{range_test}
\title{Create objects of class `range_test`}
\format{\preformatted{List of 31
 $ coefficients     : Named num [1:2] 2.1508 -0.0316
  ..- attr(*, "names")= chr [1:2] "(Intercept)" "x"
 $ residuals        : Named num [1:3] 1.116 -0.603 2.315
  ..- attr(*, "names")= chr [1:3] "1" "2" "3"
 $ fitted.values    : Named num [1:3] 0.8957 0.639 0.0152
  ..- attr(*, "names")= chr [1:3] "1" "2" "3"
 $ effects          : Named num [1:3] -0.464 0.744 0.53
  ..- attr(*, "names")= chr [1:3] "(Intercept)" "x" ""
 $ R                : num [1:2, 1:2] -0.582 0 -24.965 -23.54
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : chr [1:2] "(Intercept)" "x"
  .. ..$ : chr [1:2] "(Intercept)" "x"
 $ rank             : int 2
 $ qr               :List of 5
  ..$ qr   : num [1:3, 1:2] -0.582 0.825 0.21 -24.965 -23.54 ...
  .. ..- attr(*, "dimnames")=List of 2
  .. .. ..$ : chr [1:3] "1" "2" "3"
  .. .. ..$ : chr [1:2] "(Intercept)" "x"
  ..$ rank : int 2
  ..$ qraux: num [1:2] 1.52 1.45
  ..$ pivot: int [1:2] 1 2
  ..$ tol  : num 1e-11
  ..- attr(*, "class")= chr "qr"
 $ family           :List of 12
  ..$ family    : chr "binomial"
  ..$ link      : chr "logit"
  ..$ linkfun   :function (mu)  
  ..$ linkinv   :function (eta)  
  ..$ variance  :function (mu)  
  ..$ dev.resids:function (y, mu, wt)  
  ..$ aic       :function (y, n, mu, wt, dev)  
  ..$ mu.eta    :function (eta)  
  ..$ initialize:  expression(\{     if (NCOL(y) == 1) \{         if (is.factor(y))              y <- y != levels(y)[1L]         n <- rep.int(1, nobs)         y[weights == 0] <- 0         if (any(y < 0 | y > 1))              stop("y values must be 0 <= y <= 1")         mustart <- (weights * y + 0.5)/(weights + 1)         m <- weights * y         if (any(abs(m - round(m)) > 0.001))              warning("non-integer #successes in a binomial glm!")     \}     else if (NCOL(y) == 2) \{         if (any(abs(y - round(y)) > 0.001))              warning("non-integer counts in a binomial glm!")         n <- y[, 1] + y[, 2]         y <- ifelse(n == 0, 0, y[, 1]/n)         weights <- weights * n         mustart <- (n * y + 0.5)/(n + 1)     \}     else stop("for the 'binomial' family, y must be a vector of 0 and 1's\\nor a 2 column matrix where col 1 is no. successes and col 2 is no. failures") \})
  ..$ validmu   :function (mu)  
  ..$ valideta  :function (eta)  
  ..$ simulate  :function (object, nsim)  
  ..- attr(*, "class")= chr "family"
 $ linear.predictors: Named num [1:3] 2.151 0.571 -4.168
  ..- attr(*, "names")= chr [1:3] "1" "2" "3"
 $ deviance         : num 0.351
 $ aic              : num 6.29
 $ null.deviance    : num 2.37
 $ iter             : int 6
 $ weights          : Named num [1:3] 0.0934 0.2307 0.015
  ..- attr(*, "names")= chr [1:3] "1" "2" "3"
 $ prior.weights    : Named num [1:3] 1 1 1
  ..- attr(*, "names")= chr [1:3] "1" "2" "3"
 $ df.residual      : int 1
 $ df.null          : int 2
 $ y                : Named num [1:3] 1 0.5 0.05
  ..- attr(*, "names")= chr [1:3] "1" "2" "3"
 $ converged        : logi TRUE
 $ boundary         : logi FALSE
 $ model            :'data.frame':	3 obs. of  2 variables:
  ..$ y: num [1:3] 1 0.5 0.05
  ..$ x: num [1:3] 0 50 200
  ..- attr(*, "terms")=Classes 'terms', 'formula' length 3 y ~ x
  .. .. ..- attr(*, "variables")= language list(y, x)
  .. .. ..- attr(*, "factors")= int [1:2, 1] 0 1
  .. .. .. ..- attr(*, "dimnames")=List of 2
  .. .. .. .. ..$ : chr [1:2] "y" "x"
  .. .. .. .. ..$ : chr "x"
  .. .. ..- attr(*, "term.labels")= chr "x"
  .. .. ..- attr(*, "order")= int 1
  .. .. ..- attr(*, "intercept")= int 1
  .. .. ..- attr(*, "response")= int 1
  .. .. ..- attr(*, ".Environment")=<environment: 0x7fb965013e98> 
  .. .. ..- attr(*, "predvars")= language list(y, x)
  .. .. ..- attr(*, "dataClasses")= Named chr [1:2] "numeric" "numeric"
  .. .. .. ..- attr(*, "names")= chr [1:2] "y" "x"
 $ call             : language glm(formula = y ~ x, family = "binomial", data = data)
 $ formula          :Class 'formula' length 3 y ~ x
  .. ..- attr(*, ".Environment")=<environment: 0x7fb965013e98> 
 $ terms            :Classes 'terms', 'formula' length 3 y ~ x
  .. ..- attr(*, "variables")= language list(y, x)
  .. ..- attr(*, "factors")= int [1:2, 1] 0 1
  .. .. ..- attr(*, "dimnames")=List of 2
  .. .. .. ..$ : chr [1:2] "y" "x"
  .. .. .. ..$ : chr "x"
  .. ..- attr(*, "term.labels")= chr "x"
  .. ..- attr(*, "order")= int 1
  .. ..- attr(*, "intercept")= int 1
  .. ..- attr(*, "response")= int 1
  .. ..- attr(*, ".Environment")=<environment: 0x7fb965013e98> 
  .. ..- attr(*, "predvars")= language list(y, x)
  .. ..- attr(*, "dataClasses")= Named chr [1:2] "numeric" "numeric"
  .. .. ..- attr(*, "names")= chr [1:2] "y" "x"
 $ data             :'data.frame':	3 obs. of  2 variables:
  ..$ x: num [1:3] 0 50 200
  ..$ y: num [1:3] 1 0.5 0.05
 $ offset           : NULL
 $ control          :List of 3
  ..$ epsilon: num 1e-08
  ..$ maxit  : num 25
  ..$ trace  : logi FALSE
 $ method           : chr "glm.fit"
 $ contrasts        : NULL
 $ xlevels          : Named list()
 $ param            :List of 3
  ..$ P0 : num 1
  ..$ D50: num 50
  ..$ D95: num 200
 - attr(*, "class")= chr [1:3] "glm" "lm" "range_test"
}}
\usage{
range_test
}
\arguments{
\item{x}{logistic relationship of the detection probability as a function of
  distance from a receiver. It can be specified as 1) a named list with the
  fields P0 (detection probability at a distance 0), D50 (distance
  corresponding to a detection probability of 50\%), and D95 (distance
  corresponding to a detection probability of 5\%). OR 2) a numeric vector
  with three elements corresponding to P0, D50 and D95. OR 3) a
  \code{\link{glm}} model of with a binomial family}
}
\value{
j
}
\description{
jhjh
}
\keyword{datasets}

